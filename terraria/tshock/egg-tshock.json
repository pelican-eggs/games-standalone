{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
    "meta": {
        "version": "PLCN_v1",
        "update_url": "https:\/\/raw.githubusercontent.com\/pelican-eggs\/games-standalone\/refs\/heads\/main\/terraria\/tshock\/egg-tshock.json"
    },
    "exported_at": "2025-05-17T14:58:23+00:00",
    "name": "TShock",
    "author": "parker@parkervcp.com",
    "uuid": "abebe204-ef9f-4498-a009-e5a50ed7fffb",
    "description": "The t-shock modded terraria server.\r\n\r\nhttps:\/\/tshock.co\/",
    "tags": [
        "Terraria"
    ],
    "features": [],
    "docker_images": {
        "Dotnet 6 (For TShock version 5) ": "ghcr.io\/parkervcp\/yolks:dotnet_6",
        "Dotnet 9 (For TShock version 6 and above)": "ghcr.io\/parkervcp\/yolks:dotnet_9",
        "Mono (For TShock version 4)": "ghcr.io\/parkervcp\/yolks:mono_latest"
    },
    "file_denylist": [],
    "startup": "SERVER_ARGS=\"-ip 0.0.0.0 -port {{SERVER_PORT}} -maxplayers {{MAX_PLAYERS}} -world {{WORLD_NAME}}.wld -autocreate {{WORLD_SIZE}}\"; if [ -f TShock.Server ]; then .\/TShock.Server \"$SERVER_ARGS\"; else mono TerrariaServer.exe \"$SERVER_ARGS\"; fi\n",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"Type 'help' for a list of commands\"\r\n}",
        "logs": "{}",
        "stop": "exit"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# TShock Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\n## install packages to get version and download links\r\napt update\r\napt install -y curl wget jq file unzip\r\n\r\n## get release info and download links\r\nLATEST_JSON=$(curl --silent \"https:\/\/api.github.com\/repos\/Pryaxis\/TShock\/releases\/latest\" | jq 'del(.body)')\r\nRELEASES=$(curl --silent \"https:\/\/api.github.com\/repos\/Pryaxis\/TShock\/releases\" | jq '.[] | del(.body)')\r\n\r\nif [[ \"${TSHOCK_VERSION:0:2}\" == \"v4\" ]]; then\r\n    DOWNLOAD_LINK=$(echo ${RELEASES} | jq -r --arg VERSION \"${TSHOCK_VERSION}\" '.assets |  .[].browser_download_url | select(contains($VERSION))')\r\nelif [ -z \"$TSHOCK_VERSION\" ] || [ \"$TSHOCK_VERSION\" == \"latest\" ]; then\r\n    if [[ $(uname -m) == \"x86_64\" ]]; then\r\n        DOWNLOAD_LINK=$(echo ${LATEST_JSON} | jq -r '.assets | .[].browser_download_url | select(contains(\"linux\")) | select((contains(\"amd64\") or contains(\"x64\")))')\r\n    elif [[ $(uname -m) == \"aarch64\" ]]; then\r\n        DOWNLOAD_LINK=$(echo ${LATEST_JSON} | jq -r '.assets |  .[].browser_download_url | select(contains(\"linux\")) | select(contains(\"arm64\"))')\r\n    else\r\n        echo \"unrecognized architecture\"\r\n        exit 1\r\n    fi\r\nelse\r\n    if [[ $(uname -m) == \"x86_64\" ]]; then\r\n        DOWNLOAD_LINK=$(echo ${RELEASES} | jq -r --arg VERSION \"${TSHOCK_VERSION}\" '.assets | .[].browser_download_url | select(contains($VERSION)) | select(contains(\"linux\")) | select((contains(\"amd64\") or contains(\"x64\")))')\r\n    elif [[ $(uname -m) == \"aarch64\" ]]; then\r\n        DOWNLOAD_LINK=$(echo ${RELEASES} | jq -r --arg VERSION \"${TSHOCK_VERSION}\"  '.assets |  .[].browser_download_url | select(contains($VERSION)) | select(contains(\"linux\")) | select(contains(\"arm64\"))')\r\n    else\r\n        echo \"unrecognized architecture\"\r\n        exit 1\r\n    fi\r\nfi\r\n\r\n## mkdir and cd to \/mnt\/server\/\r\nmkdir -p \/mnt\/server\r\n\r\ncd \/mnt\/server\r\n\r\n## download release\r\necho -e \"running: wget $DOWNLOAD_LINK\"\r\nwget $DOWNLOAD_LINK -O TShock.zip\r\n\r\nif [ -f TShock.zip ]; then\r\n    unzip -o TShock.zip\r\nelse\r\n    echo \"No Zip File Found\"\r\n    exit 1\r\nfi\r\n\r\nif [[ \"${TSHOCK_VERSION:0:2}\" == \"v4\" ]]; then\r\n    rm TShock.zip\r\n    chmod +x TerrariaServer.exe\r\nelif [ -z \"$TSHOCK_VERSION\" ] || [ \"$TSHOCK_VERSION\" == \"latest\" ]; then\r\n    if [ -f \"$(ls TShock-*.tar 2>\/dev\/null | head -n 1)\" ]; then\r\n        tar xvf TShock-*.tar\r\n        rm TShock.zip TShock-*.tar\r\n        chmod +x TShock.Server\r\n    else\r\n        echo \"No Tar File Found\"\r\n        exit 1\r\n    fi\r\nfi\r\n\r\necho -e \"install complete\"",
            "container": "ghcr.io\/parkervcp\/installers:debian",
            "entrypoint": "\/bin\/bash"
        }
    },
    "variables": [
        {
            "sort": 1,
            "name": "Max Players",
            "description": "The maximum number of players a server will hold.",
            "env_variable": "MAX_PLAYERS",
            "default_value": "8",
            "user_viewable": true,
            "user_editable": false,
            "rules": [
                "required",
                "numeric",
                "digits_between:1,3"
            ]
        },
        {
            "sort": 4,
            "name": "Tshock Version",
            "description": "The version on tshock that will be installed. default is latest non-pre-release",
            "env_variable": "TSHOCK_VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": false,
            "rules": [
                "required",
                "string",
                "max:20"
            ]
        },
        {
            "sort": 3,
            "name": "World Name",
            "description": "The name for the world file.",
            "env_variable": "WORLD_NAME",
            "default_value": "world",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "string",
                "max:20"
            ]
        },
        {
            "sort": 2,
            "name": "World Size",
            "description": "Defines the worlds size. 3 sizes 1 (small), 2 (medium), 3 (large).",
            "env_variable": "WORLD_SIZE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": false,
            "rules": [
                "required",
                "numeric",
                "digits_between:1,3"
            ]
        }
    ]
}